{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/database/models/User.ts","../../server/database/models/Ride.ts","../../server/database/mongoDatabase.ts","../../server/routes/auth.ts","../../server/routes/user.ts","../../server/routes/rides.ts","../../server/routes/users.ts","../../server/database/connection.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import mongoose, { Schema, Document } from \"mongoose\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface IUser extends Document {\n  id: string;\n  name: string;\n  email: string;\n  phone?: string;\n  password: string;\n  dateOfBirth?: string;\n  address?: string;\n  joinDate: Date;\n  memberLevel: \"Bronze\" | \"Silver\" | \"Gold\" | \"Platinum\";\n  isActive: boolean;\n  comparePassword(candidatePassword: string): Promise<boolean>;\n}\n\nconst UserSchema: Schema<IUser> = new Schema(\n  {\n    name: {\n      type: String,\n      required: [true, \"Name is required\"],\n      trim: true,\n      minlength: [2, \"Name must be at least 2 characters\"],\n      maxlength: [50, \"Name cannot exceed 50 characters\"],\n    },\n    email: {\n      type: String,\n      required: [true, \"Email is required\"],\n      unique: true,\n      lowercase: true,\n      trim: true,\n      match: [\n        /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n        \"Please provide a valid email address\",\n      ],\n    },\n    phone: {\n      type: String,\n      trim: true,\n      match: [/^\\+?[\\d\\s\\-\\(\\)]+$/, \"Please provide a valid phone number\"],\n    },\n    password: {\n      type: String,\n      required: [true, \"Password is required\"],\n      minlength: [6, \"Password must be at least 6 characters\"],\n      select: false, // Don't include password in queries by default\n    },\n    dateOfBirth: {\n      type: String,\n      trim: true,\n    },\n    address: {\n      type: String,\n      trim: true,\n      maxlength: [200, \"Address cannot exceed 200 characters\"],\n    },\n    joinDate: {\n      type: Date,\n      default: Date.now,\n    },\n    memberLevel: {\n      type: String,\n      enum: [\"Bronze\", \"Silver\", \"Gold\", \"Platinum\"],\n      default: \"Bronze\",\n    },\n    isActive: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  {\n    timestamps: true,\n    toJSON: {\n      transform: function (doc, ret) {\n        ret.id = ret._id;\n        delete ret._id;\n        delete ret.__v;\n        delete ret.password;\n        return ret;\n      },\n    },\n    toObject: {\n      transform: function (doc, ret) {\n        ret.id = ret._id;\n        delete ret._id;\n        delete ret.__v;\n        delete ret.password;\n        return ret;\n      },\n    },\n  },\n);\n\n// Index for faster queries\nUserSchema.index({ email: 1 });\nUserSchema.index({ isActive: 1 });\nUserSchema.index({ memberLevel: 1 });\n\n// Hash password before saving\nUserSchema.pre<IUser>(\"save\", async function (next) {\n  // Only hash the password if it has been modified (or is new)\n  if (!this.isModified(\"password\")) return next();\n\n  try {\n    // Hash password with cost of 12\n    const salt = await bcrypt.genSalt(12);\n    this.password = await bcrypt.hash(this.password, salt);\n    next();\n  } catch (error) {\n    next(error as Error);\n  }\n});\n\n// Instance method to check password\nUserSchema.methods.comparePassword = async function (\n  candidatePassword: string,\n): Promise<boolean> {\n  try {\n    return await bcrypt.compare(candidatePassword, this.password);\n  } catch (error) {\n    return false;\n  }\n};\n\n// Static method to find user with password for authentication\nUserSchema.statics.findByEmailWithPassword = function (email: string) {\n  return this.findOne({ email, isActive: true }).select(\"+password\");\n};\n\nexport const User = mongoose.model<IUser>(\"User\", UserSchema);\n","import mongoose, { Schema, Document } from \"mongoose\";\n\nexport interface IRide extends Document {\n  id: string;\n  userId: mongoose.Types.ObjectId;\n  from: string;\n  to: string;\n  date: Date;\n  amount: number;\n  status: \"Completed\" | \"Cancelled\" | \"In Progress\";\n  driverName: string;\n  rating?: number;\n  paymentMethod: string;\n  duration?: number; // in minutes\n  distance?: number; // in kilometers\n}\n\nconst RideSchema: Schema<IRide> = new Schema(\n  {\n    userId: {\n      type: Schema.Types.ObjectId,\n      ref: \"User\",\n      required: [true, \"User ID is required\"],\n      index: true,\n    },\n    from: {\n      type: String,\n      required: [true, \"Pickup location is required\"],\n      trim: true,\n      maxlength: [100, \"Pickup location cannot exceed 100 characters\"],\n    },\n    to: {\n      type: String,\n      required: [true, \"Destination is required\"],\n      trim: true,\n      maxlength: [100, \"Destination cannot exceed 100 characters\"],\n    },\n    date: {\n      type: Date,\n      required: [true, \"Ride date is required\"],\n      index: true,\n    },\n    amount: {\n      type: Number,\n      required: [true, \"Ride amount is required\"],\n      min: [0, \"Amount cannot be negative\"],\n      validate: {\n        validator: function (value: number) {\n          return Number.isFinite(value) && value >= 0;\n        },\n        message: \"Amount must be a valid positive number\",\n      },\n    },\n    status: {\n      type: String,\n      enum: {\n        values: [\"Completed\", \"Cancelled\", \"In Progress\"],\n        message: \"Status must be Completed, Cancelled, or In Progress\",\n      },\n      default: \"In Progress\",\n      index: true,\n    },\n    driverName: {\n      type: String,\n      required: [true, \"Driver name is required\"],\n      trim: true,\n      maxlength: [50, \"Driver name cannot exceed 50 characters\"],\n    },\n    rating: {\n      type: Number,\n      min: [1, \"Rating must be at least 1\"],\n      max: [5, \"Rating cannot exceed 5\"],\n      validate: {\n        validator: function (value: number) {\n          return Number.isInteger(value) && value >= 1 && value <= 5;\n        },\n        message: \"Rating must be an integer between 1 and 5\",\n      },\n    },\n    paymentMethod: {\n      type: String,\n      required: [true, \"Payment method is required\"],\n      enum: {\n        values: [\"Card\", \"Cash\", \"Digital Wallet\"],\n        message: \"Payment method must be Card, Cash, or Digital Wallet\",\n      },\n    },\n    duration: {\n      type: Number,\n      min: [1, \"Duration must be at least 1 minute\"],\n      validate: {\n        validator: function (value: number) {\n          return !value || (Number.isInteger(value) && value > 0);\n        },\n        message: \"Duration must be a positive integer (minutes)\",\n      },\n    },\n    distance: {\n      type: Number,\n      min: [0.1, \"Distance must be at least 0.1 km\"],\n      validate: {\n        validator: function (value: number) {\n          return !value || (Number.isFinite(value) && value > 0);\n        },\n        message: \"Distance must be a positive number (kilometers)\",\n      },\n    },\n  },\n  {\n    timestamps: true,\n    toJSON: {\n      transform: function (doc, ret) {\n        ret.id = ret._id;\n        delete ret._id;\n        delete ret.__v;\n        return ret;\n      },\n    },\n    toObject: {\n      transform: function (doc, ret) {\n        ret.id = ret._id;\n        delete ret._id;\n        delete ret.__v;\n        return ret;\n      },\n    },\n  },\n);\n\n// Indexes for better query performance\nRideSchema.index({ userId: 1, date: -1 }); // User rides sorted by date\nRideSchema.index({ status: 1, date: -1 }); // Rides by status and date\nRideSchema.index({ date: -1 }); // Recent rides\nRideSchema.index({ userId: 1, status: 1 }); // User rides by status\n\n// Static methods for common queries\nRideSchema.statics.findByUserId = function (\n  userId: string,\n  limit: number = 10,\n) {\n  return this.find({ userId })\n    .sort({ date: -1 })\n    .limit(limit)\n    .populate(\"userId\", \"name email\");\n};\n\nRideSchema.statics.findRecentByUserId = function (\n  userId: string,\n  limit: number = 5,\n) {\n  return this.find({ userId, status: \"Completed\" })\n    .sort({ date: -1 })\n    .limit(limit);\n};\n\nRideSchema.statics.getUserStats = async function (userId: string) {\n  const stats = await this.aggregate([\n    { $match: { userId: new mongoose.Types.ObjectId(userId) } },\n    {\n      $group: {\n        _id: null,\n        totalRides: { $sum: 1 },\n        totalSpent: { $sum: \"$amount\" },\n        averageRating: { $avg: \"$rating\" },\n        completedRides: {\n          $sum: { $cond: [{ $eq: [\"$status\", \"Completed\"] }, 1, 0] },\n        },\n      },\n    },\n  ]);\n\n  return (\n    stats[0] || {\n      totalRides: 0,\n      totalSpent: 0,\n      averageRating: 0,\n      completedRides: 0,\n    }\n  );\n};\n\nexport const Ride = mongoose.model<IRide>(\"Ride\", RideSchema);\n","import mongoose from \"mongoose\";\nimport { User, Ride, IUser, IRide } from \"./models\";\nimport { UserStats } from \"@shared/database\";\n\n// MongoDB database operations replacing the mock database\n\nexport const getUserByEmail = async (email: string): Promise<IUser | null> => {\n  try {\n    const user = await User.findOne({ email, isActive: true });\n    return user;\n  } catch (error) {\n    console.error(\"Error finding user by email:\", error);\n    return null;\n  }\n};\n\nexport const getUserById = async (id: string): Promise<IUser | null> => {\n  try {\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      return null;\n    }\n    const user = await User.findById(id);\n    return user;\n  } catch (error) {\n    console.error(\"Error finding user by ID:\", error);\n    return null;\n  }\n};\n\nexport const createUser = async (userData: {\n  name: string;\n  email: string;\n  phone?: string;\n  password: string;\n  dateOfBirth?: string;\n  address?: string;\n}): Promise<IUser> => {\n  try {\n    const newUser = new User({\n      name: userData.name,\n      email: userData.email,\n      phone: userData.phone,\n      password: userData.password,\n      dateOfBirth: userData.dateOfBirth,\n      address: userData.address,\n      joinDate: new Date(),\n      memberLevel: \"Bronze\",\n      isActive: true,\n    });\n\n    const savedUser = await newUser.save();\n    return savedUser;\n  } catch (error) {\n    console.error(\"Error creating user:\", error);\n    throw error;\n  }\n};\n\nexport const getUserRides = async (\n  userId: string,\n  limit: number = 10,\n): Promise<IRide[]> => {\n  try {\n    if (!mongoose.Types.ObjectId.isValid(userId)) {\n      return [];\n    }\n\n    const rides = await Ride.find({ userId }).sort({ date: -1 }).limit(limit);\n\n    return rides;\n  } catch (error) {\n    console.error(\"Error fetching user rides:\", error);\n    return [];\n  }\n};\n\nexport const getUserStats = async (userId: string): Promise<UserStats> => {\n  try {\n    if (!mongoose.Types.ObjectId.isValid(userId)) {\n      return {\n        totalRides: 0,\n        totalSpent: 0,\n        averageRating: 0,\n        memberLevel: \"Bronze\",\n        joinDate: new Date(),\n      };\n    }\n\n    const user = await User.findById(userId);\n    if (!user) {\n      return {\n        totalRides: 0,\n        totalSpent: 0,\n        averageRating: 0,\n        memberLevel: \"Bronze\",\n        joinDate: new Date(),\n      };\n    }\n\n    const rideStats = await Ride.aggregate([\n      { $match: { userId: new mongoose.Types.ObjectId(userId) } },\n      {\n        $group: {\n          _id: null,\n          totalRides: { $sum: 1 },\n          totalSpent: { $sum: \"$amount\" },\n          ratingsSum: { $sum: \"$rating\" },\n          ratingsCount: {\n            $sum: { $cond: [{ $ne: [\"$rating\", null] }, 1, 0] },\n          },\n        },\n      },\n    ]);\n\n    const stats = rideStats[0] || {\n      totalRides: 0,\n      totalSpent: 0,\n      ratingsSum: 0,\n      ratingsCount: 0,\n    };\n\n    const averageRating =\n      stats.ratingsCount > 0 ? stats.ratingsSum / stats.ratingsCount : 0;\n\n    return {\n      totalRides: stats.totalRides,\n      totalSpent: stats.totalSpent,\n      averageRating: Math.round(averageRating * 10) / 10, // Round to 1 decimal\n      memberLevel: user.memberLevel,\n      joinDate: user.joinDate,\n    };\n  } catch (error) {\n    console.error(\"Error calculating user stats:\", error);\n    return {\n      totalRides: 0,\n      totalSpent: 0,\n      averageRating: 0,\n      memberLevel: \"Bronze\",\n      joinDate: new Date(),\n    };\n  }\n};\n\nexport const validateUserCredentials = async (\n  email: string,\n  password: string,\n): Promise<IUser | null> => {\n  try {\n    // Find user with password field included\n    const user = await User.findOne({ email, isActive: true }).select(\n      \"+password\",\n    );\n\n    if (!user) {\n      return null;\n    }\n\n    // Compare password using the model method\n    const isPasswordValid = await user.comparePassword(password);\n\n    if (!isPasswordValid) {\n      return null;\n    }\n\n    // Return user without password\n    const userObj = user.toObject();\n    delete userObj.password;\n    return userObj as IUser;\n  } catch (error) {\n    console.error(\"Error validating user credentials:\", error);\n    return null;\n  }\n};\n\nexport const addSampleRidesForUser = async (userId: string): Promise<void> => {\n  try {\n    if (!mongoose.Types.ObjectId.isValid(userId)) {\n      return;\n    }\n\n    const sampleRides = [\n      {\n        userId: new mongoose.Types.ObjectId(userId),\n        from: \"Welcome Location\",\n        to: \"First Destination\",\n        date: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\n        amount: 15.75,\n        status: \"Completed\" as const,\n        driverName: \"Welcome Driver\",\n        rating: 5,\n        paymentMethod: \"Card\",\n        duration: 20,\n        distance: 6.2,\n      },\n    ];\n\n    await Ride.insertMany(sampleRides);\n    console.log(\n      `✅ Added ${sampleRides.length} sample rides for user ${userId}`,\n    );\n  } catch (error) {\n    console.error(\"Error adding sample rides:\", error);\n  }\n};\n\n// Initialize database with sample data\nexport const initializeDatabase = async (): Promise<void> => {\n  try {\n    console.log(\"🔧 Initializing MongoDB database...\");\n\n    // Check if users already exist\n    const existingUsersCount = await User.countDocuments();\n\n    if (existingUsersCount > 0) {\n      console.log(\n        `📊 Database already has ${existingUsersCount} users. Skipping initialization.`,\n      );\n      return;\n    }\n\n    console.log(\"🏗️ Creating sample users and rides...\");\n\n    // Create sample users\n    const sampleUsers = [\n      {\n        name: \"John Smith\",\n        email: \"john@example.com\",\n        phone: \"+1234567890\",\n        password: \"password123\",\n        memberLevel: \"Gold\" as const,\n      },\n      {\n        name: \"Sarah Johnson\",\n        email: \"sarah@example.com\",\n        phone: \"+1987654321\",\n        password: \"password456\",\n        memberLevel: \"Silver\" as const,\n      },\n    ];\n\n    const createdUsers = await User.insertMany(sampleUsers);\n    console.log(`✅ Created ${createdUsers.length} sample users`);\n\n    // Create sample rides for John Smith\n    const johnUser = createdUsers.find(\n      (user) => user.email === \"john@example.com\",\n    );\n    if (johnUser) {\n      const sampleRides = [\n        {\n          userId: johnUser._id,\n          from: \"Downtown Office\",\n          to: \"Home\",\n          date: new Date(),\n          amount: 24.5,\n          status: \"Completed\" as const,\n          driverName: \"Mike Wilson\",\n          rating: 5,\n          paymentMethod: \"Card\",\n          duration: 25,\n          distance: 8.5,\n        },\n        {\n          userId: johnUser._id,\n          from: \"Airport Terminal 1\",\n          to: \"City Center\",\n          date: new Date(Date.now() - 24 * 60 * 60 * 1000), // Yesterday\n          amount: 45.8,\n          status: \"Completed\" as const,\n          driverName: \"David Chen\",\n          rating: 4,\n          paymentMethod: \"Card\",\n          duration: 35,\n          distance: 22.3,\n        },\n        {\n          userId: johnUser._id,\n          from: \"Shopping Mall\",\n          to: \"Restaurant District\",\n          date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 days ago\n          amount: 18.3,\n          status: \"Completed\" as const,\n          driverName: \"Alex Rodriguez\",\n          rating: 5,\n          paymentMethod: \"Cash\",\n          duration: 18,\n          distance: 5.2,\n        },\n        {\n          userId: johnUser._id,\n          from: \"Hotel Plaza\",\n          to: \"Conference Center\",\n          date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 1 week ago\n          amount: 32.4,\n          status: \"Completed\" as const,\n          driverName: \"Jennifer Adams\",\n          rating: 4,\n          paymentMethod: \"Card\",\n          duration: 28,\n          distance: 12.1,\n        },\n      ];\n\n      await Ride.insertMany(sampleRides);\n      console.log(\n        `✅ Created ${sampleRides.length} sample rides for John Smith`,\n      );\n    }\n\n    // Create sample ride for Sarah Johnson\n    const sarahUser = createdUsers.find(\n      (user) => user.email === \"sarah@example.com\",\n    );\n    if (sarahUser) {\n      const sarahRides = [\n        {\n          userId: sarahUser._id,\n          from: \"University Campus\",\n          to: \"Coffee Shop\",\n          date: new Date(),\n          amount: 12.4,\n          status: \"Completed\" as const,\n          driverName: \"Emma Davis\",\n          rating: 5,\n          paymentMethod: \"Card\",\n          duration: 15,\n          distance: 3.1,\n        },\n      ];\n\n      await Ride.insertMany(sarahRides);\n      console.log(\n        `✅ Created ${sarahRides.length} sample rides for Sarah Johnson`,\n      );\n    }\n\n    console.log(\"🎉 Database initialization completed successfully!\");\n\n    // Log final counts\n    const totalUsers = await User.countDocuments();\n    const totalRides = await Ride.countDocuments();\n    console.log(`📊 Total users: ${totalUsers}`);\n    console.log(`🚗 Total rides: ${totalRides}`);\n  } catch (error) {\n    console.error(\"❌ Error initializing database:\", error);\n    throw error;\n  }\n};\n\n// Admin/Debug functions\nexport const getAllUsers = async (): Promise<IUser[]> => {\n  try {\n    const users = await User.find({ isActive: true }).sort({ joinDate: -1 });\n    return users;\n  } catch (error) {\n    console.error(\"Error fetching all users:\", error);\n    return [];\n  }\n};\n\nexport const getAllRides = async (): Promise<IRide[]> => {\n  try {\n    const rides = await Ride.find()\n      .populate(\"userId\", \"name email\")\n      .sort({ date: -1 });\n    return rides;\n  } catch (error) {\n    console.error(\"Error fetching all rides:\", error);\n    return [];\n  }\n};\n","import { RequestHandler } from \"express\";\nimport {\n  LoginRequest,\n  LoginResponse,\n  SignupRequest,\n  SignupResponse,\n} from \"@shared/database\";\nimport {\n  validateUserCredentials,\n  createUser,\n  getUserByEmail,\n  addSampleRidesForUser,\n} from \"../database/mongoDatabase\";\n\nexport const loginHandler: RequestHandler<\n  {},\n  LoginResponse,\n  LoginRequest\n> = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n      return res.json({\n        success: false,\n        error: \"Email and password are required\",\n      });\n    }\n\n    // Validate credentials\n    const user = await validateUserCredentials(email, password);\n\n    if (!user) {\n      return res.json({\n        success: false,\n        error: \"Invalid email or password\",\n      });\n    }\n\n    // Remove password from response\n    const { password: _, ...userWithoutPassword } = user;\n\n    res.json({\n      success: true,\n      user: userWithoutPassword as any,\n    });\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    res.json({\n      success: false,\n      error: \"An error occurred during login\",\n    });\n  }\n};\n\nexport const signupHandler: RequestHandler<\n  {},\n  SignupResponse,\n  SignupRequest\n> = async (req, res) => {\n  try {\n    const { name, email, phone, password, dateOfBirth, address } = req.body;\n\n    if (!name || !email || !phone || !password) {\n      return res.status(400).json({\n        success: false,\n        error: \"Name, email, phone, and password are required\",\n      });\n    }\n\n    // Check if user already exists\n    const existingUser = await getUserByEmail(email);\n    if (existingUser) {\n      return res.status(409).json({\n        success: false,\n        error: \"User with this email already exists\",\n      });\n    }\n\n    // Create new user\n    const newUser = await createUser({\n      name,\n      email,\n      phone,\n      password, // In real app, hash the password\n      dateOfBirth,\n      address,\n    });\n\n    // Add some sample rides for new user\n    await addSampleRidesForUser(newUser.id);\n\n    // Remove password from response\n    const { password: _, ...userWithoutPassword } = newUser;\n\n    res.status(201).json({\n      success: true,\n      user: userWithoutPassword as any,\n    });\n  } catch (error) {\n    console.error(\"Signup error:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"An error occurred during signup\",\n    });\n  }\n};\n","import { RequestHandler } from \"express\";\nimport { UserDataResponse } from \"@shared/database\";\nimport {\n  getUserById,\n  getUserRides,\n  getUserStats,\n} from \"../database/mongoDatabase\";\n\nexport const getUserDataHandler: RequestHandler<\n  { userId: string },\n  UserDataResponse\n> = async (req, res) => {\n  try {\n    const { userId } = req.params;\n\n    if (!userId) {\n      return res.json({\n        success: false,\n        error: \"User ID is required\",\n      });\n    }\n\n    // Get user data\n    const user = await getUserById(userId);\n    if (!user) {\n      return res.json({\n        success: false,\n        error: \"User not found\",\n      });\n    }\n\n    // Get recent rides\n    const recentRides = await getUserRides(userId, 5);\n\n    // Get user stats\n    const stats = await getUserStats(userId);\n\n    // Remove password from user object\n    const { password: _, ...userWithoutPassword } = user;\n\n    res.json({\n      success: true,\n      user: userWithoutPassword as any,\n      recentRides,\n      stats,\n    });\n  } catch (error) {\n    console.error(\"Get user data error:\", error);\n    res.json({\n      success: false,\n      error: \"An error occurred while fetching user data\",\n    });\n  }\n};\n\nexport const getUserRidesHandler: RequestHandler<\n  { userId: string },\n  { success: boolean; rides?: any[]; error?: string }\n> = async (req, res) => {\n  try {\n    const { userId } = req.params;\n    const limit = parseInt(req.query.limit as string) || 10;\n\n    if (!userId) {\n      return res.json({\n        success: false,\n        error: \"User ID is required\",\n      });\n    }\n\n    const rides = await getUserRides(userId, limit);\n\n    res.json({\n      success: true,\n      rides,\n    });\n  } catch (error) {\n    console.error(\"Get user rides error:\", error);\n    res.json({\n      success: false,\n      error: \"An error occurred while fetching rides\",\n    });\n  }\n};\n","import { Router, Request, Response } from \"express\";\r\nimport { getAllRides } from \"../database/mongoDatabase\";\r\n\r\nconst router = Router();\r\n\r\nrouter.get(\"/\", async (_req: Request, res: Response) => {\r\n  try {\r\n    const rides = await getAllRides();\r\n    res.status(200).json({\r\n      success: true,\r\n      message: \"Rides retrieved successfully\",\r\n      data: rides,\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: \"Error fetching rides\",\r\n      error: error.message,\r\n    });\r\n  }\r\n});\r\n\r\nexport default router;\r\n","import express from \"express\";\nimport { getUserDataHandler, getUserRidesHandler } from \"./user\";\nimport { getAllUsers, createUser, getUserById } from \"../database/mongoDatabase\";\n\nconst router = express.Router();\n\n// Get all users\nrouter.get(\"/\", async (_req, res) => {\n  try {\n    const users = await getAllUsers();\n    res.json({ success: true, users });\n  } catch (error) {\n    console.error(\"Error fetching users:\", error);\n    res.status(500).json({ success: false, error: \"Failed to fetch users\" });\n  }\n});\n\n// Create a new user\nrouter.post(\"/\", async (req, res) => {\n  try {\n    const user = await createUser(req.body);\n    res.status(201).json({ success: true, user });\n  } catch (error) {\n    if (error.name === \"ValidationError\") {\n      console.error(\"Validation error creating user:\", error);\n      res.status(400).json({ success: false, error: error.message });\n    } else {\n      console.error(\"Error creating user:\", error);\n      res.status(500).json({ success: false, error: \"Failed to create user\", details: error.message });\n    }\n  }\n});\n\n// Get user by ID\nrouter.get(\"/:userId\", async (req, res) => {\n  try {\n    const user = await getUserById(req.params.userId);\n    if (!user) {\n      return res.status(404).json({ success: false, error: \"User not found\" });\n    }\n    res.json({ success: true, user });\n  } catch (error) {\n    console.error(\"Error fetching user:\", error);\n    res.status(500).json({ success: false, error: \"Failed to fetch user\" });\n  }\n});\n\nexport default router;\n","import mongoose from \"mongoose\";\n\n// MongoDB configuration\nconst MONGODB_URI =\n  process.env.MONGODB_URI || \"mongodb://localhost:27017/quickride\";\n\n// Connection options for better performance and reliability\nconst connectionOptions = {\n  serverSelectionTimeoutMS: 5000, // Keep trying to send operations for 5 seconds\n  socketTimeoutMS: 45000, // Close sockets after 45 seconds of inactivity\n  maxPoolSize: 10, // Maintain up to 10 socket connections\n  minPoolSize: 5, // Maintain a minimum of 5 socket connections\n  maxIdleTimeMS: 30000, // Close connections after 30 seconds of inactivity\n  // bufferCommands: false, // Disable mongoose buffering\n  // bufferMaxEntries: 0, // Disable mongoose buffering\n  // Removed deprecated options causing MongoParseError\n};\n\nlet isConnected = false;\n\nexport const connectToDatabase = async (): Promise<void> => {\n  if (isConnected) {\n    console.log(\"📊 Already connected to MongoDB\");\n    return;\n  }\n\n  try {\n    console.log(\"🔗 Connecting to MongoDB...\");\n\n    await mongoose.connect(MONGODB_URI, connectionOptions);\n\n    isConnected = true;\n    console.log(\"✅ Successfully connected to MongoDB\");\n    console.log(`📍 Database: ${mongoose.connection.name}`);\n\n    // Handle connection events\n    mongoose.connection.on(\"error\", (error) => {\n      console.error(\"❌ MongoDB connection error:\", error);\n      isConnected = false;\n    });\n\n    mongoose.connection.on(\"disconnected\", () => {\n      console.log(\"⚠️ MongoDB disconnected\");\n      isConnected = false;\n    });\n\n    mongoose.connection.on(\"reconnected\", () => {\n      console.log(\"🔄 MongoDB reconnected\");\n      isConnected = true;\n    });\n  } catch (error) {\n    console.error(\"❌ Failed to connect to MongoDB:\", error);\n    isConnected = false;\n    throw error;\n  }\n};\n\nexport const disconnectFromDatabase = async (): Promise<void> => {\n  if (!isConnected) {\n    return;\n  }\n\n  try {\n    await mongoose.disconnect();\n    isConnected = false;\n    console.log(\"🔌 Disconnected from MongoDB\");\n  } catch (error) {\n    console.error(\"❌ Error disconnecting from MongoDB:\", error);\n    throw error;\n  }\n};\n\nexport const getConnectionStatus = (): boolean => {\n  return isConnected && mongoose.connection.readyState === 1;\n};\n\n// Handle process termination\nprocess.on(\"SIGINT\", async () => {\n  console.log(\"\\n⚠️ Process interrupted, closing MongoDB connection...\");\n  await disconnectFromDatabase();\n  process.exit(0);\n});\n\nprocess.on(\"SIGTERM\", async () => {\n  console.log(\"\\n⚠️ Process terminated, closing MongoDB connection...\");\n  await disconnectFromDatabase();\n  process.exit(0);\n});\n","import express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport { loginHandler, signupHandler } from \"./routes/auth\";\nimport { getUserDataHandler, getUserRidesHandler } from \"./routes/user\";\nimport ridesRouter from \"./routes/rides\";\nimport usersRouter from \"./routes/users\";\nimport { connectToDatabase } from \"./database/connection.ts\";\nimport { initializeDatabase } from \"./database/mongoDatabase\";\n\nexport async function createServer() {\n  const app = express();\n\n  // Connect to MongoDB\n  try {\n    await connectToDatabase();\n    // Initialize database with sample data (if needed)\n    await initializeDatabase();\n  } catch (error) {\n    console.error(\"❌ Failed to initialize database:\", error);\n    // Optionally, you can choose to exit or continue with limited functionality\n    // process.exit(1);\n  }\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    res.json({ message: \"Hello from Express server v2!\" });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n\n  // Authentication routes\n  app.post(\"/api/auth/login\", loginHandler);\n  app.post(\"/api/auth/signup\", signupHandler);\n\n  // User data routes\n  app.get(\"/api/user/:userId/data\", getUserDataHandler);\n  app.get(\"/api/user/:userId/rides\", getUserRidesHandler);\n\n  // Users routes\n  app.use(\"/api/users\", usersRouter);\n\n  // Rides routes\n  app.use(\"/api/rides\", ridesRouter);\n\n  // Admin/Debug routes (for development)\n  app.get(\"/api/admin/users\", async (_req, res) => {\n    try {\n      const { getAllUsers } = await import(\"./database/mongoDatabase\");\n      const users = await getAllUsers();\n      res.json({ success: true, users });\n    } catch (error) {\n      console.error(\"Error fetching all users:\", error);\n      res.status(500).json({ success: false, error: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get(\"/api/admin/rides\", async (_req, res) => {\n    try {\n      const { getAllRides } = await import(\"./database/mongoDatabase\");\n      const rides = await getAllRides();\n      res.json({ success: true, rides });\n    } catch (error) {\n      console.error(\"Error fetching all rides:\", error);\n      res.status(500).json({ success: false, error: \"Failed to fetch rides\" });\n    }\n  });\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nasync function startServer() {\n  try {\n    const app = await createServer();\n    const port = process.env.PORT || 3000;\n\n    // In production, serve the built SPA files\n    const __dirname = import.meta.dirname;\n    const distPath = path.join(__dirname, \"../spa\");\n\n    // Serve static files\n    app.use(express.static(distPath));\n\n    // Handle React Router - serve index.html for all non-API routes\n    app.get(\"*\", (req, res) => {\n      // Don't serve index.html for API routes\n      if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n        return res.status(404).json({ error: \"API endpoint not found\" });\n      }\n\n      res.sendFile(path.join(distPath, \"index.html\"));\n    });\n\n    app.listen(port, () => {\n      console.log(`🚀 QuickRide server running on port ${port}`);\n      console.log(`📱 Frontend: http://localhost:${port}`);\n      console.log(`🔧 API: http://localhost:${port}/api`);\n      console.log(`🗃️ Database: MongoDB`);\n    });\n  } catch (error) {\n    console.error(\"❌ Failed to start server:\", error);\n    process.exit(1);\n  }\n}\n\n// Start the server\nstartServer();\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["router","express","usersRouter","ridesRouter","getAllUsers","getAllRides"],"mappings":"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"}