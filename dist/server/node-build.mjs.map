{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/database/databaseService.ts","../../server/routes/auth.ts","../../server/routes/user.ts","../../server/routes/rides.ts","../../server/routes/users.ts","../../server/routes/maps.ts","../../server/firebase/config.ts","../../server/firebase/firebaseDatabase.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","// Database service that uses Firebase Firestore with fallback to mock database\n// This provides a consistent interface for all database operations\n\n// Try Firebase first since it's now enabled\nlet databaseType: \"firebase\" | \"mock\" = \"firebase\";\n\nexport const getDatabaseService = async () => {\n  if (databaseType === \"firebase\") {\n    try {\n      const firebaseDb = await import(\"../firebase/firebaseDatabase\");\n      // Test Firebase connection by attempting a simple operation\n      await firebaseDb.getAllUsers();\n      return firebaseDb;\n    } catch (error) {\n      console.warn(\"⚠️ Firebase not accessible, falling back to mock database\");\n      console.log(\n        \"🔧 To use Firebase, ensure Firestore is enabled in your Firebase console\",\n      );\n      databaseType = \"mock\";\n      return await import(\"./mockDatabase\");\n    }\n  } else {\n    // Use mock database\n    return await import(\"./mockDatabase\");\n  }\n};\n\n// Re-export common database functions with automatic fallback\nexport const getUserById = async (id: string) => {\n  const db = await getDatabaseService();\n  return db.getUserById(id);\n};\n\nexport const getUserByEmail = async (email: string) => {\n  const db = await getDatabaseService();\n  return db.getUserByEmail(email);\n};\n\nexport const createUser = async (userData: any) => {\n  const db = await getDatabaseService();\n  return db.createUser(userData);\n};\n\nexport const getUserRides = async (userId: string, limit?: number) => {\n  const db = await getDatabaseService();\n  return db.getUserRides(userId, limit);\n};\n\nexport const getUserStats = async (userId: string) => {\n  const db = await getDatabaseService();\n  return db.getUserStats(userId);\n};\n\nexport const validateUserCredentials = async (\n  email: string,\n  password: string,\n) => {\n  const db = await getDatabaseService();\n  return db.validateUserCredentials(email, password);\n};\n\nexport const getAllUsers = async () => {\n  const db = await getDatabaseService();\n  return db.getAllUsers();\n};\n\nexport const getAllRides = async () => {\n  const db = await getDatabaseService();\n  return db.getAllRides();\n};\n\nexport const addSampleRidesForUser = async (userId: string) => {\n  const db = await getDatabaseService();\n  if (db.addSampleRidesForUser) {\n    return db.addSampleRidesForUser(userId);\n  }\n  // MongoDB version doesn't have this function\n};\n","import { RequestHandler } from \"express\";\nimport {\n  LoginRequest,\n  LoginResponse,\n  SignupRequest,\n  SignupResponse,\n} from \"@shared/database\";\nimport {\n  validateUserCredentials,\n  createUser,\n  getUserByEmail,\n} from \"../database/databaseService\";\n\nexport const loginHandler: RequestHandler<\n  {},\n  LoginResponse,\n  LoginRequest\n> = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n      return res.json({\n        success: false,\n        error: \"Email and password are required\",\n      });\n    }\n\n    // Validate credentials\n    const user = await validateUserCredentials(email, password);\n\n    if (!user) {\n      return res.json({\n        success: false,\n        error: \"Invalid email or password\",\n      });\n    }\n\n    // Remove password from response\n    const { password: _, ...userWithoutPassword } = user;\n\n    res.json({\n      success: true,\n      user: userWithoutPassword as any,\n    });\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    res.json({\n      success: false,\n      error: \"An error occurred during login\",\n    });\n  }\n};\n\nexport const signupHandler: RequestHandler<\n  {},\n  SignupResponse,\n  SignupRequest\n> = async (req, res) => {\n  try {\n    // Ensure response hasn't been sent yet\n    if (res.headersSent) {\n      console.warn(\"Headers already sent in signup handler\");\n      return;\n    }\n\n    const { name, email, phone, password, dateOfBirth, address } = req.body;\n\n    if (!name || !email || !phone || !password) {\n      return res.status(400).json({\n        success: false,\n        error: \"Name, email, phone, and password are required\",\n      });\n    }\n\n    // Check if user already exists\n    const existingUser = await getUserByEmail(email);\n    if (existingUser) {\n      return res.status(409).json({\n        success: false,\n        error: \"User with this email already exists\",\n      });\n    }\n\n    // Create new user - only include defined fields\n    const userCreateData: any = {\n      name,\n      email,\n      phone,\n      password, // In real app, hash the password\n    };\n\n    // Only add optional fields if they're provided\n    if (dateOfBirth !== undefined) {\n      userCreateData.dateOfBirth = dateOfBirth;\n    }\n    if (address !== undefined) {\n      userCreateData.address = address;\n    }\n\n    const newUser = await createUser(userCreateData);\n\n    // Add some sample rides for new user (only for mock database)\n    try {\n      const { addSampleRidesForUser } = await import(\n        \"../database/databaseService\"\n      );\n      if (addSampleRidesForUser) {\n        await addSampleRidesForUser(newUser.id);\n      }\n    } catch (error) {\n      // Ignore if function doesn't exist (MongoDB case)\n      console.log(\"Sample rides not added:\", error.message);\n    }\n\n    // Remove password from response\n    const { password: _, ...userObj } = newUser;\n\n    // Ensure we only send response once\n    if (!res.headersSent) {\n      res.status(201).json({\n        success: true,\n        user: userObj,\n      });\n    }\n  } catch (error) {\n    console.error(\"Signup error:\", error);\n\n    // Ensure we only send response once\n    if (!res.headersSent) {\n      res.status(500).json({\n        success: false,\n        error: \"An error occurred during signup\",\n      });\n    }\n  }\n};\n","import { RequestHandler } from \"express\";\nimport { UserDataResponse } from \"@shared/database\";\nimport {\n  getUserById,\n  getUserRides,\n  getUserStats,\n} from \"../database/databaseService\";\n\nexport const getUserDataHandler: RequestHandler<\n  { userId: string },\n  UserDataResponse\n> = async (req, res) => {\n  try {\n    const { userId } = req.params;\n\n    if (!userId) {\n      return res.json({\n        success: false,\n        error: \"User ID is required\",\n      });\n    }\n\n    // Get user data\n    const user = await getUserById(userId);\n    if (!user) {\n      return res.json({\n        success: false,\n        error: \"User not found\",\n      });\n    }\n\n    // Get recent rides\n    const recentRides = await getUserRides(userId, 5);\n\n    // Get user stats\n    const stats = await getUserStats(userId);\n\n    // Remove password from user object\n    const { password: _, ...userWithoutPassword } = user;\n\n    res.json({\n      success: true,\n      user: userWithoutPassword as any,\n      recentRides,\n      stats,\n    });\n  } catch (error) {\n    console.error(\"Get user data error:\", error);\n    res.json({\n      success: false,\n      error: \"An error occurred while fetching user data\",\n    });\n  }\n};\n\nexport const getUserRidesHandler: RequestHandler<\n  { userId: string },\n  { success: boolean; rides?: any[]; error?: string }\n> = async (req, res) => {\n  try {\n    const { userId } = req.params;\n    const limit = parseInt(req.query.limit as string) || 10;\n\n    if (!userId) {\n      return res.json({\n        success: false,\n        error: \"User ID is required\",\n      });\n    }\n\n    const rides = await getUserRides(userId, limit);\n\n    res.json({\n      success: true,\n      rides,\n    });\n  } catch (error) {\n    console.error(\"Get user rides error:\", error);\n    res.json({\n      success: false,\n      error: \"An error occurred while fetching rides\",\n    });\n  }\n};\n","import { Router, Request, Response } from \"express\";\nimport { getAllRides } from \"../database/databaseService\";\n\nconst router = Router();\n\nrouter.get(\"/\", async (_req: Request, res: Response) => {\n  try {\n    const rides = await getAllRides();\n    res.status(200).json({\n      success: true,\n      message: \"Rides retrieved successfully\",\n      data: rides,\n    });\n  } catch (error: any) {\n    res.status(500).json({\n      success: false,\n      message: \"Error fetching rides\",\n      error: error.message,\n    });\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport { getUserDataHandler, getUserRidesHandler } from \"./user\";\nimport { getAllUsers, createUser, getUserById } from \"../database/databaseService\";\n\nconst router = express.Router();\n\n// Get all users\nrouter.get(\"/\", async (_req, res) => {\n  try {\n    const users = await getAllUsers();\n    res.json({ success: true, users });\n  } catch (error) {\n    console.error(\"Error fetching users:\", error);\n    res.status(500).json({ success: false, error: \"Failed to fetch users\" });\n  }\n});\n\n// Create a new user\nrouter.post(\"/\", async (req, res) => {\n  try {\n    const user = await createUser(req.body);\n    res.status(201).json({ success: true, user });\n  } catch (error) {\n    if (error.name === \"ValidationError\") {\n      console.error(\"Validation error creating user:\", error);\n      res.status(400).json({ success: false, error: error.message });\n    } else {\n      console.error(\"Error creating user:\", error);\n      res.status(500).json({ success: false, error: \"Failed to create user\", details: error.message });\n    }\n  }\n});\n\n// Get user by ID\nrouter.get(\"/:userId\", async (req, res) => {\n  try {\n    const user = await getUserById(req.params.userId);\n    if (!user) {\n      return res.status(404).json({ success: false, error: \"User not found\" });\n    }\n    res.json({ success: true, user });\n  } catch (error) {\n    console.error(\"Error fetching user:\", error);\n    res.status(500).json({ success: false, error: \"Failed to fetch user\" });\n  }\n});\n\nexport default router;\n","import { RequestHandler } from \"express\";\n\n// Store the API key securely on the server\nconst GOOGLE_MAPS_API_KEY = \"AlzaSyhJspyVs4WcwF7eW1ZS_0FselUQJMsK7jb\";\n\nexport interface MapsConfigResponse {\n  apiKey: string;\n  success: boolean;\n}\n\nexport const getMapsConfigHandler: RequestHandler = (req, res) => {\n  try {\n    // In production, you might want to add additional security checks\n    // like validating the user session or request origin\n    \n    const response: MapsConfigResponse = {\n      apiKey: GOOGLE_MAPS_API_KEY,\n      success: true\n    };\n    \n    res.json(response);\n  } catch (error) {\n    console.error(\"Error getting maps config:\", error);\n    res.status(500).json({ \n      success: false, \n      error: \"Failed to get maps configuration\" \n    });\n  }\n};\n","import { initializeApp } from \"firebase/app\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { getAuth } from \"firebase/auth\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAmRDzRrbvHH5LqkXv0-5Bxtsw3ynqfm4s\",\n  authDomain: \"uride-cab-service.firebaseapp.com\",\n  projectId: \"uride-cab-service\",\n  storageBucket: \"uride-cab-service.firebasestorage.app\",\n  messagingSenderId: \"552199078858\",\n  appId: \"1:552199078858:web:c1db2f2429f6b3a3f64533\",\n  measurementId: \"G-Q14PG2EC6L\",\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase services\nexport const db = getFirestore(app);\nexport const auth = getAuth(app);\n\nexport default app;\n","import {\n  collection,\n  doc,\n  getDoc,\n  setDoc,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  orderBy,\n  limit,\n  getDocs,\n  addDoc,\n  Timestamp,\n} from \"firebase/firestore\";\nimport { db } from \"./config\";\nimport { User, Ride, UserStats } from \"@shared/database\";\n\n// Collections\nconst USERS_COLLECTION = \"users\";\nconst RIDES_COLLECTION = \"rides\";\n\n// Firebase database operations for URide application\n\nexport const getUserByEmail = async (email: string): Promise<User | null> => {\n  try {\n    const usersRef = collection(db, USERS_COLLECTION);\n    const q = query(usersRef, where(\"email\", \"==\", email));\n    const querySnapshot = await getDocs(q);\n\n    if (querySnapshot.empty) {\n      return null;\n    }\n\n    const userData = querySnapshot.docs[0].data();\n    return {\n      id: querySnapshot.docs[0].id,\n      ...userData,\n      joinDate: userData.joinDate.toDate(),\n    } as User;\n  } catch (error) {\n    console.error(\"Error getting user by email:\", error);\n    return null;\n  }\n};\n\nexport const getUserById = async (id: string): Promise<User | null> => {\n  try {\n    const userRef = doc(db, USERS_COLLECTION, id);\n    const userSnap = await getDoc(userRef);\n\n    if (!userSnap.exists()) {\n      return null;\n    }\n\n    const userData = userSnap.data();\n    return {\n      id: userSnap.id,\n      ...userData,\n      joinDate: userData.joinDate.toDate(),\n    } as User;\n  } catch (error) {\n    console.error(\"Error getting user by ID:\", error);\n    return null;\n  }\n};\n\nexport const createUser = async (\n  userData: Omit<User, \"id\" | \"joinDate\" | \"memberLevel\" | \"isActive\">,\n): Promise<User> => {\n  try {\n    // Filter out undefined values that Firebase doesn't accept\n    const cleanedUserData = Object.fromEntries(\n      Object.entries(userData).filter(([_, value]) => value !== undefined),\n    );\n\n    const newUser = {\n      ...cleanedUserData,\n      joinDate: Timestamp.now(),\n      memberLevel: \"Bronze\",\n      isActive: true,\n    };\n\n    const docRef = await addDoc(collection(db, USERS_COLLECTION), newUser);\n\n    return {\n      id: docRef.id,\n      ...newUser,\n      joinDate: newUser.joinDate.toDate(),\n    } as User;\n  } catch (error) {\n    console.error(\"Error creating user:\", error);\n    throw error;\n  }\n};\n\nexport const getUserRides = async (\n  userId: string,\n  limitCount: number = 10,\n): Promise<Ride[]> => {\n  try {\n    const ridesRef = collection(db, RIDES_COLLECTION);\n    const q = query(\n      ridesRef,\n      where(\"userId\", \"==\", userId),\n      orderBy(\"date\", \"desc\"),\n      limit(limitCount),\n    );\n\n    const querySnapshot = await getDocs(q);\n    const rides: Ride[] = [];\n\n    querySnapshot.forEach((doc) => {\n      const rideData = doc.data();\n      rides.push({\n        id: doc.id,\n        ...rideData,\n        date: rideData.date.toDate(),\n      } as Ride);\n    });\n\n    return rides;\n  } catch (error) {\n    console.error(\"Error getting user rides:\", error);\n    return [];\n  }\n};\n\nexport const getUserStats = async (userId: string): Promise<UserStats> => {\n  try {\n    const userRides = await getUserRides(userId, 1000); // Get all rides for stats\n    const user = await getUserById(userId);\n\n    const totalRides = userRides.length;\n    const totalSpent = userRides.reduce((sum, ride) => sum + ride.amount, 0);\n    const ratingsSum = userRides.reduce(\n      (sum, ride) => sum + (ride.rating || 0),\n      0,\n    );\n    const averageRating = totalRides > 0 ? ratingsSum / totalRides : 0;\n\n    return {\n      totalRides,\n      totalSpent,\n      averageRating,\n      memberLevel: user?.memberLevel || \"Bronze\",\n      joinDate: user?.joinDate || new Date(),\n    };\n  } catch (error) {\n    console.error(\"Error getting user stats:\", error);\n    return {\n      totalRides: 0,\n      totalSpent: 0,\n      averageRating: 0,\n      memberLevel: \"Bronze\",\n      joinDate: new Date(),\n    };\n  }\n};\n\nexport const validateUserCredentials = async (\n  email: string,\n  password: string,\n): Promise<User | null> => {\n  try {\n    const user = await getUserByEmail(email);\n    if (user && user.password === password) {\n      // In real app, you'd compare hashed passwords\n      return user;\n    }\n    return null;\n  } catch (error) {\n    console.error(\"Error validating credentials:\", error);\n    return null;\n  }\n};\n\nexport const addSampleRidesForUser = async (userId: string): Promise<void> => {\n  try {\n    const sampleRides = [\n      {\n        userId,\n        from: \"Karol Bagh Metro Station\",\n        to: \"Rajouri Garden\",\n        date: Timestamp.fromDate(new Date(Date.now() - 2 * 60 * 60 * 1000)), // 2 hours ago\n        amount: 120.0,\n        status: \"Completed\",\n        driverName: \"Ravi Sharma\",\n        rating: 5,\n        paymentMethod: \"UPI\",\n        duration: 20,\n        distance: 6.2,\n      },\n    ];\n\n    for (const rideData of sampleRides) {\n      await addDoc(collection(db, RIDES_COLLECTION), rideData);\n    }\n  } catch (error) {\n    console.error(\"Error adding sample rides:\", error);\n  }\n};\n\nexport const getAllUsers = async (): Promise<any[]> => {\n  try {\n    const usersRef = collection(db, USERS_COLLECTION);\n\n    // Add timeout to prevent hanging\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => reject(new Error(\"Firebase request timeout\")), 5000);\n    });\n\n    const querySnapshot = await Promise.race([\n      getDocs(usersRef),\n      timeoutPromise,\n    ]);\n\n    const users: any[] = [];\n\n    (querySnapshot as any).forEach((doc: any) => {\n      const userData = doc.data();\n      const { password, ...userWithoutPassword } = userData;\n      users.push({\n        id: doc.id,\n        ...userWithoutPassword,\n        joinDate: userData.joinDate.toDate(),\n      });\n    });\n\n    return users;\n  } catch (error) {\n    console.error(\"Error getting all users:\", error);\n    throw error; // Re-throw to trigger fallback\n  }\n};\n\nexport const getAllRides = async (): Promise<Ride[]> => {\n  try {\n    const ridesRef = collection(db, RIDES_COLLECTION);\n    const querySnapshot = await getDocs(ridesRef);\n    const rides: Ride[] = [];\n\n    querySnapshot.forEach((doc) => {\n      const rideData = doc.data();\n      rides.push({\n        id: doc.id,\n        ...rideData,\n        date: rideData.date.toDate(),\n      } as Ride);\n    });\n\n    return rides;\n  } catch (error) {\n    console.error(\"Error getting all rides:\", error);\n    return [];\n  }\n};\n\n// Initialize database with sample data\nexport const initializeDatabase = async (): Promise<void> => {\n  try {\n    // Add timeout to prevent hanging\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(\n        () => reject(new Error(\"Firebase initialization timeout\")),\n        10000,\n      );\n    });\n\n    // Check if users already exist\n    const existingUsers = await Promise.race([getAllUsers(), timeoutPromise]);\n\n    if ((existingUsers as any[]).length > 0) {\n      console.log(\"✅ Firebase database already contains data\");\n      return;\n    }\n\n    // Create sample users\n    const sampleUsers = [\n      {\n        name: \"Rajesh Kumar\",\n        email: \"rajesh@example.com\",\n        phone: \"+91 98765 43210\",\n        password: \"password123\",\n      },\n      {\n        name: \"Priya Sharma\",\n        email: \"priya@example.com\",\n        phone: \"+91 87654 32109\",\n        password: \"password456\",\n      },\n    ];\n\n    const createdUsers: User[] = [];\n    for (const userData of sampleUsers) {\n      const user = await createUser(userData);\n      createdUsers.push(user);\n    }\n\n    // Create sample rides\n    const sampleRides = [\n      {\n        userId: createdUsers[0].id,\n        from: \"Connaught Place\",\n        to: \"Dwarka Sector 12\",\n        date: Timestamp.now(),\n        amount: 285.0,\n        status: \"Completed\",\n        driverName: \"Vikram Singh\",\n        rating: 5,\n        paymentMethod: \"UPI\",\n        duration: 25,\n        distance: 8.5,\n      },\n      {\n        userId: createdUsers[0].id,\n        from: \"IGI Airport Terminal 3\",\n        to: \"India Gate\",\n        date: Timestamp.fromDate(new Date(Date.now() - 24 * 60 * 60 * 1000)),\n        amount: 520.0,\n        status: \"Completed\",\n        driverName: \"Suresh Kumar\",\n        rating: 4,\n        paymentMethod: \"Card\",\n        duration: 35,\n        distance: 22.3,\n      },\n      {\n        userId: createdUsers[1].id,\n        from: \"JNU Campus\",\n        to: \"CCD Janpath\",\n        date: Timestamp.now(),\n        amount: 95.0,\n        status: \"Completed\",\n        driverName: \"Anjali Verma\",\n        rating: 5,\n        paymentMethod: \"UPI\",\n        duration: 15,\n        distance: 3.1,\n      },\n    ];\n\n    for (const rideData of sampleRides) {\n      await addDoc(collection(db, RIDES_COLLECTION), rideData);\n    }\n\n    console.log(\"✅ Firebase database initialized with sample data\");\n    console.log(`📊 Total users: ${createdUsers.length}`);\n    console.log(`🚗 Total rides: ${sampleRides.length}`);\n  } catch (error) {\n    console.error(\"❌ Error initializing Firebase database:\", error);\n  }\n};\n","import express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport { loginHandler, signupHandler } from \"./routes/auth\";\nimport { getUserDataHandler, getUserRidesHandler } from \"./routes/user\";\nimport ridesRouter from \"./routes/rides\";\nimport usersRouter from \"./routes/users\";\nimport { getMapsConfigHandler } from \"./routes/maps\";\nimport { initializeDatabase } from \"./firebase/firebaseDatabase\";\n\nexport async function createServer() {\n  const app = express();\n\n  // Initialize database (Firebase with fallback to mock)\n  try {\n    console.log(\"🔥 Initializing Firebase database...\");\n    await initializeDatabase();\n    console.log(\"✅ Firebase database initialized successfully\");\n  } catch (error) {\n    console.warn(\n      \"⚠️ Firebase not available, using mock database for development\",\n    );\n    console.log(\"🔧 Error:\", error.message);\n    // Initialize mock database\n    const { initializeDatabase: initMockDb } = await import(\n      \"./database/mockDatabase\"\n    );\n    initMockDb();\n  }\n\n  // Middleware\n  app.use(cors());\n\n  // Add request logging\n  app.use((req, res, next) => {\n    console.log(`${req.method} ${req.path}`);\n    next();\n  });\n\n  app.use(express.json({ limit: \"10mb\" }));\n  app.use(express.urlencoded({ extended: true, limit: \"10mb\" }));\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    res.json({ message: \"Hello from Express server v2!\" });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n\n  // Authentication routes\n  app.post(\"/api/auth/login\", loginHandler);\n  app.post(\"/api/auth/signup\", signupHandler);\n\n  // Maps configuration route (secure API key delivery)\n  app.get(\"/api/maps/config\", getMapsConfigHandler);\n\n  // User data routes\n  app.get(\"/api/user/:userId/data\", getUserDataHandler);\n  app.get(\"/api/user/:userId/rides\", getUserRidesHandler);\n\n  // Users routes\n  app.use(\"/api/users\", usersRouter);\n\n  // Rides routes\n  app.use(\"/api/rides\", ridesRouter);\n\n  // Admin/Debug routes (for development)\n  app.get(\"/api/admin/users\", async (_req, res) => {\n    try {\n      const { getAllUsers } = await import(\"./database/databaseService\");\n      const users = await getAllUsers();\n      res.json({ success: true, users });\n    } catch (error) {\n      console.error(\"Error fetching all users:\", error);\n      res.status(500).json({ success: false, error: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get(\"/api/admin/rides\", async (_req, res) => {\n    try {\n      const { getAllRides } = await import(\"./database/databaseService\");\n      const rides = await getAllRides();\n      res.json({ success: true, rides });\n    } catch (error) {\n      console.error(\"Error fetching all rides:\", error);\n      res.status(500).json({ success: false, error: \"Failed to fetch rides\" });\n    }\n  });\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nasync function startServer() {\n  try {\n    const app = await createServer();\n    const port = process.env.PORT || 3000;\n\n    // In production, serve the built SPA files\n    const __dirname = import.meta.dirname;\n    const distPath = path.join(__dirname, \"../spa\");\n\n    // Serve static files\n    app.use(express.static(distPath));\n\n    // Handle React Router - serve index.html for all non-API routes\n    app.get(\"*\", (req, res) => {\n      // Don't serve index.html for API routes\n      if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n        return res.status(404).json({ error: \"API endpoint not found\" });\n      }\n\n      res.sendFile(path.join(distPath, \"index.html\"));\n    });\n\n    app.listen(port, () => {\n      console.log(`🚀 QuickRide server running on port ${port}`);\n      console.log(`📱 Frontend: http://localhost:${port}`);\n      console.log(`🔧 API: http://localhost:${port}/api`);\n      console.log(`🗃️ Database: Firebase`);\n    });\n  } catch (error) {\n    console.error(\"❌ Failed to start server:\", error);\n    process.exit(1);\n  }\n}\n\n// Start the server\nstartServer();\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["getUserById","db","getUserByEmail","createUser","getUserRides","limit","getUserStats","validateUserCredentials","getAllUsers","getAllRides","addSampleRidesForUser","router","express","doc","app","usersRouter","ridesRouter"],"mappings":"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"}